// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for handling file bundling and querying objects in the Bundle Service.",
    "title": "Bundle Service API",
    "version": "1.0.0"
  },
  "host": "bundle-service.nodereal.io",
  "basePath": "/v1",
  "paths": {
    "/addBundleRule": {
      "post": {
        "description": "Creates a new rule for bundling files, including constraints and signature for authorization.\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Bundle Configuration"
        ],
        "summary": "Add a new bundle rule",
        "operationId": "addBundleRule",
        "parameters": [
          {
            "description": "Bundle rule creation parameters",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "bucketName",
                "maxBundleSize",
                "maxBundleFiles",
                "maxFinalizeTime",
                "signature"
              ],
              "properties": {
                "bucketName": {
                  "description": "Name of the bucket for which the rule applies",
                  "type": "string"
                },
                "maxBundleFiles": {
                  "description": "Maximum number of files in a bundle",
                  "type": "integer",
                  "format": "int32"
                },
                "maxBundleSize": {
                  "description": "Maximum size of a bundle in bytes",
                  "type": "integer",
                  "format": "int64"
                },
                "maxFinalizeTime": {
                  "description": "Maximum time in seconds before a bundle must be finalized",
                  "type": "integer",
                  "format": "int32"
                },
                "signature": {
                  "description": "User's signature for authorization of rule creation",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added bundle rule"
          },
          "400": {
            "description": "Invalid request or parameters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bundleFile/{bundleName}/{objectName}": {
      "get": {
        "description": "Fetches a specific object from a given bundle and returns it as a file.\n",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Bundle File Retrieval"
        ],
        "summary": "Retrieve an object as a file from a bundle",
        "operationId": "bundleFile",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the bundle",
            "name": "bundleName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the object within the bundle",
            "name": "objectName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved file",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Bundle or object not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/manageBundle": {
      "post": {
        "description": "Manages the lifecycle of a bundle, either starting or ending it, based on the operation type.\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Bundle Management"
        ],
        "summary": "Manage a bundle (start or end)",
        "operationId": "manageBundle",
        "parameters": [
          {
            "description": "Parameters for managing a bundle",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "bundleName",
                "operationType",
                "signature"
              ],
              "properties": {
                "bundleName": {
                  "description": "The name of the bundle to be managed",
                  "type": "string"
                },
                "operationType": {
                  "description": "The type of operation (start or end the bundle)",
                  "type": "string",
                  "enum": [
                    "START_BUNDLE",
                    "END_BUNDLE"
                  ]
                },
                "signature": {
                  "description": "User's signature to authorize the operation",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully managed bundle"
          },
          "400": {
            "description": "Invalid request or parameters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/uploadObjects": {
      "post": {
        "description": "Allows users to upload a single file along with a signature for validation, and a timestamp.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Object Upload"
        ],
        "summary": "Upload a single object to a bundle",
        "operationId": "uploadObjects",
        "parameters": [
          {
            "type": "file",
            "description": "The file to be uploaded",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the file to be uploaded",
            "name": "fileName",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "User's signature for the file",
            "name": "signature",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of the upload",
            "name": "timestamp",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Content type of the file",
            "name": "contentType",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully uploaded file",
            "schema": {
              "type": "object",
              "properties": {
                "bundleName": {
                  "description": "The name of the bundle where the file has been uploaded",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or file format",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int64",
          "example": "400/500"
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "example": "Bad request/Internal server error"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for handling file bundling and querying objects in the Bundle Service.",
    "title": "Bundle Service API",
    "version": "1.0.0"
  },
  "host": "bundle-service.nodereal.io",
  "basePath": "/v1",
  "paths": {
    "/addBundleRule": {
      "post": {
        "description": "Creates a new rule for bundling files, including constraints and signature for authorization.\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Bundle Configuration"
        ],
        "summary": "Add a new bundle rule",
        "operationId": "addBundleRule",
        "parameters": [
          {
            "description": "Bundle rule creation parameters",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "bucketName",
                "maxBundleSize",
                "maxBundleFiles",
                "maxFinalizeTime",
                "signature"
              ],
              "properties": {
                "bucketName": {
                  "description": "Name of the bucket for which the rule applies",
                  "type": "string"
                },
                "maxBundleFiles": {
                  "description": "Maximum number of files in a bundle",
                  "type": "integer",
                  "format": "int32"
                },
                "maxBundleSize": {
                  "description": "Maximum size of a bundle in bytes",
                  "type": "integer",
                  "format": "int64"
                },
                "maxFinalizeTime": {
                  "description": "Maximum time in seconds before a bundle must be finalized",
                  "type": "integer",
                  "format": "int32"
                },
                "signature": {
                  "description": "User's signature for authorization of rule creation",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added bundle rule"
          },
          "400": {
            "description": "Invalid request or parameters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bundleFile/{bundleName}/{objectName}": {
      "get": {
        "description": "Fetches a specific object from a given bundle and returns it as a file.\n",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Bundle File Retrieval"
        ],
        "summary": "Retrieve an object as a file from a bundle",
        "operationId": "bundleFile",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the bundle",
            "name": "bundleName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the object within the bundle",
            "name": "objectName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved file",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Bundle or object not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/manageBundle": {
      "post": {
        "description": "Manages the lifecycle of a bundle, either starting or ending it, based on the operation type.\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Bundle Management"
        ],
        "summary": "Manage a bundle (start or end)",
        "operationId": "manageBundle",
        "parameters": [
          {
            "description": "Parameters for managing a bundle",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "bundleName",
                "operationType",
                "signature"
              ],
              "properties": {
                "bundleName": {
                  "description": "The name of the bundle to be managed",
                  "type": "string"
                },
                "operationType": {
                  "description": "The type of operation (start or end the bundle)",
                  "type": "string",
                  "enum": [
                    "START_BUNDLE",
                    "END_BUNDLE"
                  ]
                },
                "signature": {
                  "description": "User's signature to authorize the operation",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully managed bundle"
          },
          "400": {
            "description": "Invalid request or parameters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/uploadObjects": {
      "post": {
        "description": "Allows users to upload a single file along with a signature for validation, and a timestamp.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Object Upload"
        ],
        "summary": "Upload a single object to a bundle",
        "operationId": "uploadObjects",
        "parameters": [
          {
            "type": "file",
            "description": "The file to be uploaded",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the file to be uploaded",
            "name": "fileName",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "User's signature for the file",
            "name": "signature",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of the upload",
            "name": "timestamp",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Content type of the file",
            "name": "contentType",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully uploaded file",
            "schema": {
              "type": "object",
              "properties": {
                "bundleName": {
                  "description": "The name of the bundle where the file has been uploaded",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or file format",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int64",
          "example": "400/500"
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "example": "Bad request/Internal server error"
        }
      }
    }
  }
}`))
}
