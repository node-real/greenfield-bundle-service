// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BundleObjectHandlerFunc turns a function with the right signature into a bundle object handler
type BundleObjectHandlerFunc func(BundleObjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BundleObjectHandlerFunc) Handle(params BundleObjectParams) middleware.Responder {
	return fn(params)
}

// BundleObjectHandler interface for that can handle valid bundle object params
type BundleObjectHandler interface {
	Handle(BundleObjectParams) middleware.Responder
}

// NewBundleObject creates a new http.Handler for the bundle object operation
func NewBundleObject(ctx *middleware.Context, handler BundleObjectHandler) *BundleObject {
	return &BundleObject{Context: ctx, Handler: handler}
}

/*
	BundleObject swagger:route GET /bundleObject/{bundleName}/{objectName} Bundle bundleObject

# Retrieve an object as a file from a bundle

Fetches a specific object from a given bundle and returns it as a file.
*/
type BundleObject struct {
	Context *middleware.Context
	Handler BundleObjectHandler
}

func (o *BundleObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBundleObjectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
