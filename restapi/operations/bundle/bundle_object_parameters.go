// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewBundleObjectParams creates a new BundleObjectParams object
//
// There are no default values defined in the spec.
func NewBundleObjectParams() BundleObjectParams {

	return BundleObjectParams{}
}

// BundleObjectParams contains all the bound params for the bundle object operation
// typically these are obtained from a http.Request
//
// swagger:parameters bundleObject
type BundleObjectParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The name of the bundle
	  Required: true
	  In: path
	*/
	BundleName string
	/*The name of the object within the bundle
	  Required: true
	  In: path
	*/
	ObjectName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewBundleObjectParams() beforehand.
func (o *BundleObjectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rBundleName, rhkBundleName, _ := route.Params.GetOK("bundleName")
	if err := o.bindBundleName(rBundleName, rhkBundleName, route.Formats); err != nil {
		res = append(res, err)
	}

	rObjectName, rhkObjectName, _ := route.Params.GetOK("objectName")
	if err := o.bindObjectName(rObjectName, rhkObjectName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBundleName binds and validates parameter BundleName from path.
func (o *BundleObjectParams) bindBundleName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.BundleName = raw

	return nil
}

// bindObjectName binds and validates parameter ObjectName from path.
func (o *BundleObjectParams) bindObjectName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ObjectName = raw

	return nil
}
