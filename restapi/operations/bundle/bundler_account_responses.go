// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/node-real/greenfield-bundle-service/models"
)

// BundlerAccountOKCode is the HTTP code returned for type BundlerAccountOK
const BundlerAccountOKCode int = 200

/*
BundlerAccountOK Successfully retrieved bundler account

swagger:response bundlerAccountOK
*/
type BundlerAccountOK struct {

	/*
	  In: Body
	*/
	Payload *models.BundlerAccount `json:"body,omitempty"`
}

// NewBundlerAccountOK creates BundlerAccountOK with default headers values
func NewBundlerAccountOK() *BundlerAccountOK {

	return &BundlerAccountOK{}
}

// WithPayload adds the payload to the bundler account o k response
func (o *BundlerAccountOK) WithPayload(payload *models.BundlerAccount) *BundlerAccountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bundler account o k response
func (o *BundlerAccountOK) SetPayload(payload *models.BundlerAccount) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BundlerAccountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BundlerAccountBadRequestCode is the HTTP code returned for type BundlerAccountBadRequest
const BundlerAccountBadRequestCode int = 400

/*
BundlerAccountBadRequest Invalid request or parameters

swagger:response bundlerAccountBadRequest
*/
type BundlerAccountBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewBundlerAccountBadRequest creates BundlerAccountBadRequest with default headers values
func NewBundlerAccountBadRequest() *BundlerAccountBadRequest {

	return &BundlerAccountBadRequest{}
}

// WithPayload adds the payload to the bundler account bad request response
func (o *BundlerAccountBadRequest) WithPayload(payload *models.Error) *BundlerAccountBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bundler account bad request response
func (o *BundlerAccountBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BundlerAccountBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BundlerAccountInternalServerErrorCode is the HTTP code returned for type BundlerAccountInternalServerError
const BundlerAccountInternalServerErrorCode int = 500

/*
BundlerAccountInternalServerError Internal server error

swagger:response bundlerAccountInternalServerError
*/
type BundlerAccountInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewBundlerAccountInternalServerError creates BundlerAccountInternalServerError with default headers values
func NewBundlerAccountInternalServerError() *BundlerAccountInternalServerError {

	return &BundlerAccountInternalServerError{}
}

// WithPayload adds the payload to the bundler account internal server error response
func (o *BundlerAccountInternalServerError) WithPayload(payload *models.Error) *BundlerAccountInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bundler account internal server error response
func (o *BundlerAccountInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BundlerAccountInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
