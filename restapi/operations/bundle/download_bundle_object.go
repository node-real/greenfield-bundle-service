// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DownloadBundleObjectHandlerFunc turns a function with the right signature into a download bundle object handler
type DownloadBundleObjectHandlerFunc func(DownloadBundleObjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadBundleObjectHandlerFunc) Handle(params DownloadBundleObjectParams) middleware.Responder {
	return fn(params)
}

// DownloadBundleObjectHandler interface for that can handle valid download bundle object params
type DownloadBundleObjectHandler interface {
	Handle(DownloadBundleObjectParams) middleware.Responder
}

// NewDownloadBundleObject creates a new http.Handler for the download bundle object operation
func NewDownloadBundleObject(ctx *middleware.Context, handler DownloadBundleObjectHandler) *DownloadBundleObject {
	return &DownloadBundleObject{Context: ctx, Handler: handler}
}

/*
	DownloadBundleObject swagger:route GET /download/{bucketName}/{bundleName}/{objectName} Bundle downloadBundleObject

# Download an object as a file from a bundle

Download a specific object from a given bundle and returns it as a file.
*/
type DownloadBundleObject struct {
	Context *middleware.Context
	Handler DownloadBundleObjectHandler
}

func (o *DownloadBundleObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDownloadBundleObjectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
