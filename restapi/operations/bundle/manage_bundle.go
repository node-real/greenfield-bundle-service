// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ManageBundleHandlerFunc turns a function with the right signature into a manage bundle handler
type ManageBundleHandlerFunc func(ManageBundleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ManageBundleHandlerFunc) Handle(params ManageBundleParams) middleware.Responder {
	return fn(params)
}

// ManageBundleHandler interface for that can handle valid manage bundle params
type ManageBundleHandler interface {
	Handle(ManageBundleParams) middleware.Responder
}

// NewManageBundle creates a new http.Handler for the manage bundle operation
func NewManageBundle(ctx *middleware.Context, handler ManageBundleHandler) *ManageBundle {
	return &ManageBundle{Context: ctx, Handler: handler}
}

/*
	ManageBundle swagger:route POST /manageBundle Bundle manageBundle

Manage a bundle (start or end)

Manages the lifecycle of a bundle, either starting or ending it, based on the operation type.
*/
type ManageBundle struct {
	Context *middleware.Context
	Handler ManageBundleHandler
}

func (o *ManageBundle) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewManageBundleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ManageBundleBody manage bundle body
//
// swagger:model ManageBundleBody
type ManageBundleBody struct {

	// The name of the bundle to be managed
	// Required: true
	BundleName *string `json:"bundleName"`

	// The type of operation (start or end the bundle)
	// Required: true
	// Enum: [START_BUNDLE END_BUNDLE]
	OperationType *string `json:"operationType"`

	// User's signature to authorize the operation
	// Required: true
	Signature *string `json:"signature"`
}

// Validate validates this manage bundle body
func (o *ManageBundleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBundleName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperationType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ManageBundleBody) validateBundleName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"bundleName", "body", o.BundleName); err != nil {
		return err
	}

	return nil
}

var manageBundleBodyTypeOperationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["START_BUNDLE","END_BUNDLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		manageBundleBodyTypeOperationTypePropEnum = append(manageBundleBodyTypeOperationTypePropEnum, v)
	}
}

const (

	// ManageBundleBodyOperationTypeSTARTBUNDLE captures enum value "START_BUNDLE"
	ManageBundleBodyOperationTypeSTARTBUNDLE string = "START_BUNDLE"

	// ManageBundleBodyOperationTypeENDBUNDLE captures enum value "END_BUNDLE"
	ManageBundleBodyOperationTypeENDBUNDLE string = "END_BUNDLE"
)

// prop value enum
func (o *ManageBundleBody) validateOperationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, manageBundleBodyTypeOperationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ManageBundleBody) validateOperationType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"operationType", "body", o.OperationType); err != nil {
		return err
	}

	// value enum
	if err := o.validateOperationTypeEnum("body"+"."+"operationType", "body", *o.OperationType); err != nil {
		return err
	}

	return nil
}

func (o *ManageBundleBody) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"signature", "body", o.Signature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this manage bundle body based on context it is used
func (o *ManageBundleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ManageBundleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ManageBundleBody) UnmarshalBinary(b []byte) error {
	var res ManageBundleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
