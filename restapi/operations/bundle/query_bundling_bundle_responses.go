// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/node-real/greenfield-bundle-service/models"
)

// QueryBundlingBundleOKCode is the HTTP code returned for type QueryBundlingBundleOK
const QueryBundlingBundleOKCode int = 200

/*
QueryBundlingBundleOK Successfully queried bundle

swagger:response queryBundlingBundleOK
*/
type QueryBundlingBundleOK struct {

	/*
	  In: Body
	*/
	Payload *models.QueryBundleResponse `json:"body,omitempty"`
}

// NewQueryBundlingBundleOK creates QueryBundlingBundleOK with default headers values
func NewQueryBundlingBundleOK() *QueryBundlingBundleOK {

	return &QueryBundlingBundleOK{}
}

// WithPayload adds the payload to the query bundling bundle o k response
func (o *QueryBundlingBundleOK) WithPayload(payload *models.QueryBundleResponse) *QueryBundlingBundleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query bundling bundle o k response
func (o *QueryBundlingBundleOK) SetPayload(payload *models.QueryBundleResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryBundlingBundleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryBundlingBundleNotFoundCode is the HTTP code returned for type QueryBundlingBundleNotFound
const QueryBundlingBundleNotFoundCode int = 404

/*
QueryBundlingBundleNotFound Bundle not found

swagger:response queryBundlingBundleNotFound
*/
type QueryBundlingBundleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewQueryBundlingBundleNotFound creates QueryBundlingBundleNotFound with default headers values
func NewQueryBundlingBundleNotFound() *QueryBundlingBundleNotFound {

	return &QueryBundlingBundleNotFound{}
}

// WithPayload adds the payload to the query bundling bundle not found response
func (o *QueryBundlingBundleNotFound) WithPayload(payload *models.Error) *QueryBundlingBundleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query bundling bundle not found response
func (o *QueryBundlingBundleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryBundlingBundleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryBundlingBundleInternalServerErrorCode is the HTTP code returned for type QueryBundlingBundleInternalServerError
const QueryBundlingBundleInternalServerErrorCode int = 500

/*
QueryBundlingBundleInternalServerError Internal server error

swagger:response queryBundlingBundleInternalServerError
*/
type QueryBundlingBundleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewQueryBundlingBundleInternalServerError creates QueryBundlingBundleInternalServerError with default headers values
func NewQueryBundlingBundleInternalServerError() *QueryBundlingBundleInternalServerError {

	return &QueryBundlingBundleInternalServerError{}
}

// WithPayload adds the payload to the query bundling bundle internal server error response
func (o *QueryBundlingBundleInternalServerError) WithPayload(payload *models.Error) *QueryBundlingBundleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query bundling bundle internal server error response
func (o *QueryBundlingBundleInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryBundlingBundleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
