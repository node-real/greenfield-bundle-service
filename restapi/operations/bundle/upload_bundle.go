// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UploadBundleHandlerFunc turns a function with the right signature into a upload bundle handler
type UploadBundleHandlerFunc func(UploadBundleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadBundleHandlerFunc) Handle(params UploadBundleParams) middleware.Responder {
	return fn(params)
}

// UploadBundleHandler interface for that can handle valid upload bundle params
type UploadBundleHandler interface {
	Handle(UploadBundleParams) middleware.Responder
}

// NewUploadBundle creates a new http.Handler for the upload bundle operation
func NewUploadBundle(ctx *middleware.Context, handler UploadBundleHandler) *UploadBundle {
	return &UploadBundle{Context: ctx, Handler: handler}
}

/*
	UploadBundle swagger:route POST /uploadBundle Bundle uploadBundle

# Upload a bundle

Uploads a bundle of objects, requiring details like bucket name, bundle name, and etc.
*/
type UploadBundle struct {
	Context *middleware.Context
	Handler UploadBundleHandler
}

func (o *UploadBundle) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUploadBundleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
