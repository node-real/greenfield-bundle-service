// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadBundleMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UploadBundleMaxParseMemory int64 = 32 << 20

// NewUploadBundleParams creates a new UploadBundleParams object
//
// There are no default values defined in the spec.
func NewUploadBundleParams() UploadBundleParams {

	return UploadBundleParams{}
}

// UploadBundleParams contains all the bound params for the upload bundle operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadBundle
type UploadBundleParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*User's digital signature for authentication
	  Required: true
	  In: header
	*/
	Authorization string
	/*The name of the bucket
	  Required: true
	  In: header
	*/
	XBundleBucketName string
	/*Expiry timestamp of the request
	  Required: true
	  In: header
	*/
	XBundleExpiryTimestamp int64
	/*SHA256 hash of the file
	  Required: true
	  In: header
	*/
	XBundleFileSha256 string
	/*The name of the bundle to be created
	  Required: true
	  In: header
	*/
	XBundleName string
	/*The file to be uploaded
	  Required: true
	  In: formData
	*/
	File io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadBundleParams() beforehand.
func (o *UploadBundleParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UploadBundleMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXBundleBucketName(r.Header[http.CanonicalHeaderKey("X-Bundle-Bucket-Name")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXBundleExpiryTimestamp(r.Header[http.CanonicalHeaderKey("X-Bundle-Expiry-Timestamp")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXBundleFileSha256(r.Header[http.CanonicalHeaderKey("X-Bundle-File-Sha256")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXBundleName(r.Header[http.CanonicalHeaderKey("X-Bundle-Name")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err := o.bindFile(file, fileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *UploadBundleParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Authorization", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("Authorization", "header", raw); err != nil {
		return err
	}
	o.Authorization = raw

	return nil
}

// bindXBundleBucketName binds and validates parameter XBundleBucketName from header.
func (o *UploadBundleParams) bindXBundleBucketName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-Bundle-Bucket-Name", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-Bundle-Bucket-Name", "header", raw); err != nil {
		return err
	}
	o.XBundleBucketName = raw

	return nil
}

// bindXBundleExpiryTimestamp binds and validates parameter XBundleExpiryTimestamp from header.
func (o *UploadBundleParams) bindXBundleExpiryTimestamp(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-Bundle-Expiry-Timestamp", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-Bundle-Expiry-Timestamp", "header", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("X-Bundle-Expiry-Timestamp", "header", "int64", raw)
	}
	o.XBundleExpiryTimestamp = value

	return nil
}

// bindXBundleFileSha256 binds and validates parameter XBundleFileSha256 from header.
func (o *UploadBundleParams) bindXBundleFileSha256(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-Bundle-File-Sha256", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-Bundle-File-Sha256", "header", raw); err != nil {
		return err
	}
	o.XBundleFileSha256 = raw

	return nil
}

// bindXBundleName binds and validates parameter XBundleName from header.
func (o *UploadBundleParams) bindXBundleName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-Bundle-Name", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-Bundle-Name", "header", raw); err != nil {
		return err
	}
	o.XBundleName = raw

	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadBundleParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}
