// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/node-real/greenfield-bundle-service/models"
)

// UploadBundleOKCode is the HTTP code returned for type UploadBundleOK
const UploadBundleOKCode int = 200

/*
UploadBundleOK Successfully uploaded file

swagger:response uploadBundleOK
*/
type UploadBundleOK struct {

	/*
	  In: Body
	*/
	Payload *models.UploadObjectResponse `json:"body,omitempty"`
}

// NewUploadBundleOK creates UploadBundleOK with default headers values
func NewUploadBundleOK() *UploadBundleOK {

	return &UploadBundleOK{}
}

// WithPayload adds the payload to the upload bundle o k response
func (o *UploadBundleOK) WithPayload(payload *models.UploadObjectResponse) *UploadBundleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload bundle o k response
func (o *UploadBundleOK) SetPayload(payload *models.UploadObjectResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadBundleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadBundleBadRequestCode is the HTTP code returned for type UploadBundleBadRequest
const UploadBundleBadRequestCode int = 400

/*
UploadBundleBadRequest Invalid request or file format

swagger:response uploadBundleBadRequest
*/
type UploadBundleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadBundleBadRequest creates UploadBundleBadRequest with default headers values
func NewUploadBundleBadRequest() *UploadBundleBadRequest {

	return &UploadBundleBadRequest{}
}

// WithPayload adds the payload to the upload bundle bad request response
func (o *UploadBundleBadRequest) WithPayload(payload *models.Error) *UploadBundleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload bundle bad request response
func (o *UploadBundleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadBundleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadBundleInternalServerErrorCode is the HTTP code returned for type UploadBundleInternalServerError
const UploadBundleInternalServerErrorCode int = 500

/*
UploadBundleInternalServerError Internal server error

swagger:response uploadBundleInternalServerError
*/
type UploadBundleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadBundleInternalServerError creates UploadBundleInternalServerError with default headers values
func NewUploadBundleInternalServerError() *UploadBundleInternalServerError {

	return &UploadBundleInternalServerError{}
}

// WithPayload adds the payload to the upload bundle internal server error response
func (o *UploadBundleInternalServerError) WithPayload(payload *models.Error) *UploadBundleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload bundle internal server error response
func (o *UploadBundleInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadBundleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
