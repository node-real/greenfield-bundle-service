// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadObjectMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UploadObjectMaxParseMemory int64 = 32 << 20

// NewUploadObjectParams creates a new UploadObjectParams object
//
// There are no default values defined in the spec.
func NewUploadObjectParams() UploadObjectParams {

	return UploadObjectParams{}
}

// UploadObjectParams contains all the bound params for the upload object operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadObject
type UploadObjectParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*User's digital signature for authentication
	  Required: true
	  In: header
	*/
	XSignature string
	/*The bucketName of the bundle
	  Required: true
	  In: formData
	*/
	BucketName string
	/*The name of the bundle
	  In: formData
	*/
	BundleName *string
	/*Content type of the file
	  Required: true
	  In: formData
	*/
	ContentType string
	/*The file to be uploaded
	  Required: true
	  In: formData
	*/
	File io.ReadCloser
	/*The name of the file to be uploaded
	  Required: true
	  In: formData
	*/
	FileName string
	/*Timestamp of the upload
	  Required: true
	  In: formData
	*/
	Timestamp int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadObjectParams() beforehand.
func (o *UploadObjectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UploadObjectMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	if err := o.bindXSignature(r.Header[http.CanonicalHeaderKey("X-Signature")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	fdBucketName, fdhkBucketName, _ := fds.GetOK("bucketName")
	if err := o.bindBucketName(fdBucketName, fdhkBucketName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdBundleName, fdhkBundleName, _ := fds.GetOK("bundleName")
	if err := o.bindBundleName(fdBundleName, fdhkBundleName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdContentType, fdhkContentType, _ := fds.GetOK("contentType")
	if err := o.bindContentType(fdContentType, fdhkContentType, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err := o.bindFile(file, fileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}

	fdFileName, fdhkFileName, _ := fds.GetOK("fileName")
	if err := o.bindFileName(fdFileName, fdhkFileName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTimestamp, fdhkTimestamp, _ := fds.GetOK("timestamp")
	if err := o.bindTimestamp(fdTimestamp, fdhkTimestamp, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXSignature binds and validates parameter XSignature from header.
func (o *UploadObjectParams) bindXSignature(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-Signature", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-Signature", "header", raw); err != nil {
		return err
	}
	o.XSignature = raw

	return nil
}

// bindBucketName binds and validates parameter BucketName from formData.
func (o *UploadObjectParams) bindBucketName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("bucketName", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("bucketName", "formData", raw); err != nil {
		return err
	}
	o.BucketName = raw

	return nil
}

// bindBundleName binds and validates parameter BundleName from formData.
func (o *UploadObjectParams) bindBundleName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.BundleName = &raw

	return nil
}

// bindContentType binds and validates parameter ContentType from formData.
func (o *UploadObjectParams) bindContentType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("contentType", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("contentType", "formData", raw); err != nil {
		return err
	}
	o.ContentType = raw

	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadObjectParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindFileName binds and validates parameter FileName from formData.
func (o *UploadObjectParams) bindFileName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("fileName", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("fileName", "formData", raw); err != nil {
		return err
	}
	o.FileName = raw

	return nil
}

// bindTimestamp binds and validates parameter Timestamp from formData.
func (o *UploadObjectParams) bindTimestamp(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("timestamp", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("timestamp", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("timestamp", "formData", "int64", raw)
	}
	o.Timestamp = value

	return nil
}
