// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ViewBundleObjectHandlerFunc turns a function with the right signature into a view bundle object handler
type ViewBundleObjectHandlerFunc func(ViewBundleObjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ViewBundleObjectHandlerFunc) Handle(params ViewBundleObjectParams) middleware.Responder {
	return fn(params)
}

// ViewBundleObjectHandler interface for that can handle valid view bundle object params
type ViewBundleObjectHandler interface {
	Handle(ViewBundleObjectParams) middleware.Responder
}

// NewViewBundleObject creates a new http.Handler for the view bundle object operation
func NewViewBundleObject(ctx *middleware.Context, handler ViewBundleObjectHandler) *ViewBundleObject {
	return &ViewBundleObject{Context: ctx, Handler: handler}
}

/*
	ViewBundleObject swagger:route GET /view/{bucketName}/{bundleName}/{objectName} Bundle viewBundleObject

# Retrieve an object as a file from a bundle

Fetches a specific object from a given bundle and returns it as a file.
*/
type ViewBundleObject struct {
	Context *middleware.Context
	Handler ViewBundleObjectHandler
}

func (o *ViewBundleObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewViewBundleObjectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
