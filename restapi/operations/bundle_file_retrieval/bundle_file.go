// Code generated by go-swagger; DO NOT EDIT.

package bundle_file_retrieval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BundleFileHandlerFunc turns a function with the right signature into a bundle file handler
type BundleFileHandlerFunc func(BundleFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BundleFileHandlerFunc) Handle(params BundleFileParams) middleware.Responder {
	return fn(params)
}

// BundleFileHandler interface for that can handle valid bundle file params
type BundleFileHandler interface {
	Handle(BundleFileParams) middleware.Responder
}

// NewBundleFile creates a new http.Handler for the bundle file operation
func NewBundleFile(ctx *middleware.Context, handler BundleFileHandler) *BundleFile {
	return &BundleFile{Context: ctx, Handler: handler}
}

/*
	BundleFile swagger:route GET /bundleFile/{bundleName}/{objectName} Bundle File Retrieval bundleFile

# Retrieve an object as a file from a bundle

Fetches a specific object from a given bundle and returns it as a file.
*/
type BundleFile struct {
	Context *middleware.Context
	Handler BundleFileHandler
}

func (o *BundleFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBundleFileParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
