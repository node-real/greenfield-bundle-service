// Code generated by go-swagger; DO NOT EDIT.

package bundle_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/node-real/greenfield-bundle-service/models"
)

// ManageBundleOKCode is the HTTP code returned for type ManageBundleOK
const ManageBundleOKCode int = 200

/*
ManageBundleOK Successfully managed bundle

swagger:response manageBundleOK
*/
type ManageBundleOK struct {
}

// NewManageBundleOK creates ManageBundleOK with default headers values
func NewManageBundleOK() *ManageBundleOK {

	return &ManageBundleOK{}
}

// WriteResponse to the client
func (o *ManageBundleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// ManageBundleBadRequestCode is the HTTP code returned for type ManageBundleBadRequest
const ManageBundleBadRequestCode int = 400

/*
ManageBundleBadRequest Invalid request or parameters

swagger:response manageBundleBadRequest
*/
type ManageBundleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewManageBundleBadRequest creates ManageBundleBadRequest with default headers values
func NewManageBundleBadRequest() *ManageBundleBadRequest {

	return &ManageBundleBadRequest{}
}

// WithPayload adds the payload to the manage bundle bad request response
func (o *ManageBundleBadRequest) WithPayload(payload *models.Error) *ManageBundleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the manage bundle bad request response
func (o *ManageBundleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ManageBundleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ManageBundleInternalServerErrorCode is the HTTP code returned for type ManageBundleInternalServerError
const ManageBundleInternalServerErrorCode int = 500

/*
ManageBundleInternalServerError Internal server error

swagger:response manageBundleInternalServerError
*/
type ManageBundleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewManageBundleInternalServerError creates ManageBundleInternalServerError with default headers values
func NewManageBundleInternalServerError() *ManageBundleInternalServerError {

	return &ManageBundleInternalServerError{}
}

// WithPayload adds the payload to the manage bundle internal server error response
func (o *ManageBundleInternalServerError) WithPayload(payload *models.Error) *ManageBundleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the manage bundle internal server error response
func (o *ManageBundleInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ManageBundleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
