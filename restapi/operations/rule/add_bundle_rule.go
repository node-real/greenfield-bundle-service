// Code generated by go-swagger; DO NOT EDIT.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddBundleRuleHandlerFunc turns a function with the right signature into a add bundle rule handler
type AddBundleRuleHandlerFunc func(AddBundleRuleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddBundleRuleHandlerFunc) Handle(params AddBundleRuleParams) middleware.Responder {
	return fn(params)
}

// AddBundleRuleHandler interface for that can handle valid add bundle rule params
type AddBundleRuleHandler interface {
	Handle(AddBundleRuleParams) middleware.Responder
}

// NewAddBundleRule creates a new http.Handler for the add bundle rule operation
func NewAddBundleRule(ctx *middleware.Context, handler AddBundleRuleHandler) *AddBundleRule {
	return &AddBundleRule{Context: ctx, Handler: handler}
}

/*
	AddBundleRule swagger:route POST /addBundleRule rule addBundleRule

# Add a new bundle rule

Creates a new rule for bundling files, including constraints and signature for authorization.
*/
type AddBundleRule struct {
	Context *middleware.Context
	Handler AddBundleRuleHandler
}

func (o *AddBundleRule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddBundleRuleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddBundleRuleBody add bundle rule body
//
// swagger:model AddBundleRuleBody
type AddBundleRuleBody struct {

	// Name of the bucket for which the rule applies
	// Required: true
	BucketName *string `json:"bucketName"`

	// Maximum number of files in a bundle
	// Required: true
	MaxBundleFiles *int32 `json:"maxBundleFiles"`

	// Maximum size of a bundle in bytes
	// Required: true
	MaxBundleSize *int64 `json:"maxBundleSize"`

	// Maximum time in seconds before a bundle must be finalized
	// Required: true
	MaxFinalizeTime *int32 `json:"maxFinalizeTime"`

	// User's signature for authorization of rule creation
	// Required: true
	Signature *string `json:"signature"`
}

// Validate validates this add bundle rule body
func (o *AddBundleRuleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBucketName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaxBundleFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaxBundleSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaxFinalizeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddBundleRuleBody) validateBucketName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"bucketName", "body", o.BucketName); err != nil {
		return err
	}

	return nil
}

func (o *AddBundleRuleBody) validateMaxBundleFiles(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"maxBundleFiles", "body", o.MaxBundleFiles); err != nil {
		return err
	}

	return nil
}

func (o *AddBundleRuleBody) validateMaxBundleSize(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"maxBundleSize", "body", o.MaxBundleSize); err != nil {
		return err
	}

	return nil
}

func (o *AddBundleRuleBody) validateMaxFinalizeTime(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"maxFinalizeTime", "body", o.MaxFinalizeTime); err != nil {
		return err
	}

	return nil
}

func (o *AddBundleRuleBody) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"signature", "body", o.Signature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add bundle rule body based on context it is used
func (o *AddBundleRuleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddBundleRuleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddBundleRuleBody) UnmarshalBinary(b []byte) error {
	var res AddBundleRuleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
