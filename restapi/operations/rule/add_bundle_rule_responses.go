// Code generated by go-swagger; DO NOT EDIT.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/node-real/greenfield-bundle-service/models"
)

// AddBundleRuleOKCode is the HTTP code returned for type AddBundleRuleOK
const AddBundleRuleOKCode int = 200

/*
AddBundleRuleOK Successfully added bundle rule

swagger:response addBundleRuleOK
*/
type AddBundleRuleOK struct {
}

// NewAddBundleRuleOK creates AddBundleRuleOK with default headers values
func NewAddBundleRuleOK() *AddBundleRuleOK {

	return &AddBundleRuleOK{}
}

// WriteResponse to the client
func (o *AddBundleRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddBundleRuleBadRequestCode is the HTTP code returned for type AddBundleRuleBadRequest
const AddBundleRuleBadRequestCode int = 400

/*
AddBundleRuleBadRequest Invalid request or parameters

swagger:response addBundleRuleBadRequest
*/
type AddBundleRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddBundleRuleBadRequest creates AddBundleRuleBadRequest with default headers values
func NewAddBundleRuleBadRequest() *AddBundleRuleBadRequest {

	return &AddBundleRuleBadRequest{}
}

// WithPayload adds the payload to the add bundle rule bad request response
func (o *AddBundleRuleBadRequest) WithPayload(payload *models.Error) *AddBundleRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add bundle rule bad request response
func (o *AddBundleRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddBundleRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddBundleRuleInternalServerErrorCode is the HTTP code returned for type AddBundleRuleInternalServerError
const AddBundleRuleInternalServerErrorCode int = 500

/*
AddBundleRuleInternalServerError Internal server error

swagger:response addBundleRuleInternalServerError
*/
type AddBundleRuleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddBundleRuleInternalServerError creates AddBundleRuleInternalServerError with default headers values
func NewAddBundleRuleInternalServerError() *AddBundleRuleInternalServerError {

	return &AddBundleRuleInternalServerError{}
}

// WithPayload adds the payload to the add bundle rule internal server error response
func (o *AddBundleRuleInternalServerError) WithPayload(payload *models.Error) *AddBundleRuleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add bundle rule internal server error response
func (o *AddBundleRuleInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddBundleRuleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
