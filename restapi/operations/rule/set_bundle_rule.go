// Code generated by go-swagger; DO NOT EDIT.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetBundleRuleHandlerFunc turns a function with the right signature into a set bundle rule handler
type SetBundleRuleHandlerFunc func(SetBundleRuleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetBundleRuleHandlerFunc) Handle(params SetBundleRuleParams) middleware.Responder {
	return fn(params)
}

// SetBundleRuleHandler interface for that can handle valid set bundle rule params
type SetBundleRuleHandler interface {
	Handle(SetBundleRuleParams) middleware.Responder
}

// NewSetBundleRule creates a new http.Handler for the set bundle rule operation
func NewSetBundleRule(ctx *middleware.Context, handler SetBundleRuleHandler) *SetBundleRule {
	return &SetBundleRule{Context: ctx, Handler: handler}
}

/*
	SetBundleRule swagger:route POST /setBundleRule Rule setBundleRule

# Set New Bundling Rules

Set new rules or replace old rules for bundling, including constraints like maximum size and number of files.
*/
type SetBundleRule struct {
	Context *middleware.Context
	Handler SetBundleRuleHandler
}

func (o *SetBundleRule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetBundleRuleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
