// Code generated by go-swagger; DO NOT EDIT.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/node-real/greenfield-bundle-service/models"
)

// SetBundleRuleOKCode is the HTTP code returned for type SetBundleRuleOK
const SetBundleRuleOKCode int = 200

/*
SetBundleRuleOK Successfully added bundle rule

swagger:response setBundleRuleOK
*/
type SetBundleRuleOK struct {
}

// NewSetBundleRuleOK creates SetBundleRuleOK with default headers values
func NewSetBundleRuleOK() *SetBundleRuleOK {

	return &SetBundleRuleOK{}
}

// WriteResponse to the client
func (o *SetBundleRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SetBundleRuleBadRequestCode is the HTTP code returned for type SetBundleRuleBadRequest
const SetBundleRuleBadRequestCode int = 400

/*
SetBundleRuleBadRequest Invalid request or parameters

swagger:response setBundleRuleBadRequest
*/
type SetBundleRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSetBundleRuleBadRequest creates SetBundleRuleBadRequest with default headers values
func NewSetBundleRuleBadRequest() *SetBundleRuleBadRequest {

	return &SetBundleRuleBadRequest{}
}

// WithPayload adds the payload to the set bundle rule bad request response
func (o *SetBundleRuleBadRequest) WithPayload(payload *models.Error) *SetBundleRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set bundle rule bad request response
func (o *SetBundleRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetBundleRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetBundleRuleInternalServerErrorCode is the HTTP code returned for type SetBundleRuleInternalServerError
const SetBundleRuleInternalServerErrorCode int = 500

/*
SetBundleRuleInternalServerError Internal server error

swagger:response setBundleRuleInternalServerError
*/
type SetBundleRuleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSetBundleRuleInternalServerError creates SetBundleRuleInternalServerError with default headers values
func NewSetBundleRuleInternalServerError() *SetBundleRuleInternalServerError {

	return &SetBundleRuleInternalServerError{}
}

// WithPayload adds the payload to the set bundle rule internal server error response
func (o *SetBundleRuleInternalServerError) WithPayload(payload *models.Error) *SetBundleRuleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set bundle rule internal server error response
func (o *SetBundleRuleInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetBundleRuleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
